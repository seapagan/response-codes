[project]
name = "http-status"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
authors = [{ name = "Grant Ramsay", email = "seapagan@gmail.com" }]
requires-python = ">=3.7"
dependencies = []

[project.scripts]
http-status = "http_status:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build]
exclude = [".vscode/"]

[tool.uv]
dev-dependencies = [
    "mypy>=1.4.1",
    "poethepoet>=0.19.0",
    "pre-commit>=2.21.0",
    "ruff>=0.9.2",
]

[tool.ruff]
line-length = 80
lint.select = ["ALL"] # we are being very strict!
lint.ignore = [
    "PGH003",
    "FBT002",
    "FBT003",
    "B006",
    "N801",   # in this library we want to relaxe the class name rule
    "N818",   # relax exception name rule
] # These rules are too strict even for us üòù
lint.extend-ignore = [
    "COM812",
    "ISC001",
] # these are ignored for ruff formatting

src = ["sqliter"]
target-version = "py37" # minimum python version supported

[tool.poe.tasks]
pre.cmd = "pre-commit run --all-files"
pre.help = "Run pre-commit checks"

mypy.cmd = "mypy . --strict"
mypy.help = "Run mypy checks"
format.cmd = "ruff format ."
format.help = "Format code with Ruff"
ruff.cmd = "ruff check --output-format=concise ."
ruff.help = "Run Ruff checks"

test.cmd = "pytest"
test.help = "Run tests using Pytest"
"test:watch".cmd = "ptw . --now --clear"
"test:watch".help = "Run tests using Pytest in watch mode"

changelog.cmd = "github-changelog-md"
changelog.help = "Generate a changelog"

"docs:publish".cmd = "mkdocs gh-deploy"
"docs:publish".help = "Publish documentation to GitHub Pages"
"docs:build".cmd = "mkdocs build"
"docs:build".help = "Build documentation locally to './site' folder"
"docs:serve".cmd = "mkdocs serve -w TODO.md -w CHANGELOG.md -w CONTRIBUTING.md"
"docs:serve".help = "Serve documentation locally"
"docs:serve:all".cmd = "mkdocs serve -w TODO.md -w CHANGELOG.md -w CONTRIBUTING.md -a 0.0.0.0:9000"
"docs:serve:all".help = "Serve documentation locally on all interfaces"

[tool.ruff.format]
indent-style = "space"
quote-style = "double"

[tool.ruff.lint.pylint]
max-args = 6

[tool.ruff.lint.pep8-naming]
classmethod-decorators = []

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
    "S101",    # we can (and MUST!) use 'assert' in test files.
    "ANN001",  # annotations for fixtures are sometimes a pain for test files
    "ARG00",   # test fixtures often are not directly used
    "PLR2004", # magic numbers are often used in test files
    "SLF001",  # sometimes we need to test private methods
]

[tool.ruff.lint.isort]
known-first-party = ["sqliter"]

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.mypy]
plugins = []

python_version = "3.9"
exclude = ["docs"]
[[tool.mypy.overrides]]
disable_error_code = ["method-assign", "no-untyped-def", "attr-defined"]
module = "tests.*"

[tool.pytest.ini_options]
addopts = [
    "--cov",
    "--cov-report",
    "term-missing",
    "--cov-report",
    "html",
    "--cov-report",
    "lcov",
]
filterwarnings = [
    "ignore:'direction' argument is deprecated:DeprecationWarning",
]
mock_use_standalone_module = true
markers = []

[tool.coverage.run]
source = ["sqliter"]
omit = ["*/tests/*"]
